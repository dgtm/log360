// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logstreamer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogStreamerClient is the client API for LogStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogStreamerClient interface {
	ProcessRequest(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (LogStreamer_ProcessRequestClient, error)
}

type logStreamerClient struct {
	cc grpc.ClientConnInterface
}

func NewLogStreamerClient(cc grpc.ClientConnInterface) LogStreamerClient {
	return &logStreamerClient{cc}
}

func (c *logStreamerClient) ProcessRequest(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (LogStreamer_ProcessRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogStreamer_ServiceDesc.Streams[0], "/logstreamer.LogStreamer/ProcessRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &logStreamerProcessRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogStreamer_ProcessRequestClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type logStreamerProcessRequestClient struct {
	grpc.ClientStream
}

func (x *logStreamerProcessRequestClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogStreamerServer is the server API for LogStreamer service.
// All implementations must embed UnimplementedLogStreamerServer
// for forward compatibility
type LogStreamerServer interface {
	ProcessRequest(*LogRequest, LogStreamer_ProcessRequestServer) error
	mustEmbedUnimplementedLogStreamerServer()
}

// UnimplementedLogStreamerServer must be embedded to have forward compatible implementations.
type UnimplementedLogStreamerServer struct {
}

func (UnimplementedLogStreamerServer) ProcessRequest(*LogRequest, LogStreamer_ProcessRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessRequest not implemented")
}
func (UnimplementedLogStreamerServer) mustEmbedUnimplementedLogStreamerServer() {}

// UnsafeLogStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogStreamerServer will
// result in compilation errors.
type UnsafeLogStreamerServer interface {
	mustEmbedUnimplementedLogStreamerServer()
}

func RegisterLogStreamerServer(s grpc.ServiceRegistrar, srv LogStreamerServer) {
	s.RegisterService(&LogStreamer_ServiceDesc, srv)
}

func _LogStreamer_ProcessRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogStreamerServer).ProcessRequest(m, &logStreamerProcessRequestServer{stream})
}

type LogStreamer_ProcessRequestServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type logStreamerProcessRequestServer struct {
	grpc.ServerStream
}

func (x *logStreamerProcessRequestServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

// LogStreamer_ServiceDesc is the grpc.ServiceDesc for LogStreamer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogStreamer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logstreamer.LogStreamer",
	HandlerType: (*LogStreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessRequest",
			Handler:       _LogStreamer_ProcessRequest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "logstreamer.proto",
}
