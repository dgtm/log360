// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logstreamer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogStreamerClient is the client API for LogStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogStreamerClient interface {
	ProcessRequest(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
}

type logStreamerClient struct {
	cc grpc.ClientConnInterface
}

func NewLogStreamerClient(cc grpc.ClientConnInterface) LogStreamerClient {
	return &logStreamerClient{cc}
}

func (c *logStreamerClient) ProcessRequest(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/logstreamer.LogStreamer/ProcessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogStreamerServer is the server API for LogStreamer service.
// All implementations must embed UnimplementedLogStreamerServer
// for forward compatibility
type LogStreamerServer interface {
	ProcessRequest(context.Context, *LogRequest) (*LogResponse, error)
	mustEmbedUnimplementedLogStreamerServer()
}

// UnimplementedLogStreamerServer must be embedded to have forward compatible implementations.
type UnimplementedLogStreamerServer struct {
}

func (UnimplementedLogStreamerServer) ProcessRequest(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRequest not implemented")
}
func (UnimplementedLogStreamerServer) mustEmbedUnimplementedLogStreamerServer() {}

// UnsafeLogStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogStreamerServer will
// result in compilation errors.
type UnsafeLogStreamerServer interface {
	mustEmbedUnimplementedLogStreamerServer()
}

func RegisterLogStreamerServer(s grpc.ServiceRegistrar, srv LogStreamerServer) {
	s.RegisterService(&LogStreamer_ServiceDesc, srv)
}

func _LogStreamer_ProcessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamerServer).ProcessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logstreamer.LogStreamer/ProcessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamerServer).ProcessRequest(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogStreamer_ServiceDesc is the grpc.ServiceDesc for LogStreamer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogStreamer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logstreamer.LogStreamer",
	HandlerType: (*LogStreamerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessRequest",
			Handler:    _LogStreamer_ProcessRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logstreamer.proto",
}
